#include <SPI.h>
#include <MFRC522.h>
#include <ESP8266WiFi.h>
#include <WiFiClient.h>  
#include <ESP8266HTTPClient.h>


#include <Wire.h>
#include <LiquidCrystal_I2C.h>

LiquidCrystal_I2C lcd(0x27, 16, 2);


#define SS_PIN  D4   
#define RST_PIN D3   
#define LED_PIN2 D0  
#define BUZZER_PIN D8  

const char* ssid = "123";  
const char* password = "guakece123.."; 


const String serverUrl = "http://tugas123.pepeprotector.com/api/receive_rfid"; 


MFRC522 rfid(SS_PIN, RST_PIN);  

WiFiClient client;

void setup() { 


  lcd.init();

  lcd.backlight();

 
  lcd.setCursor(0, 0);    
  lcd.print("Hello...");  
  delay(2000);            
  lcd.clear();         

  lcd.setCursor(0, 0);  
  lcd.print("Barakatak");    

  lcd.setCursor(0, 1);       
  lcd.print("Team");  
  delay(2000);               
  lcd.clear();            


  Serial.begin(115200);           
  SPI.begin();                   
  rfid.PCD_Init();               

  pinMode(LED_PIN2, OUTPUT);  
  pinMode(BUZZER_PIN, OUTPUT);  
  
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi...");
  }
  Serial.println("Connected to WiFi");
}

void loop() {
  if (WiFi.status() == WL_CONNECTED) {
    if (!rfid.PICC_IsNewCardPresent()) {
      return;  
    }

    if (!rfid.PICC_ReadCardSerial()) {
      return;
    }

    String uid = "";
    for (byte i = 0; i < rfid.uid.size; i++) {
      uid += String(rfid.uid.uidByte[i], HEX);
    }

    Serial.print("UID: ");
    Serial.println(uid);

    sendDataToServer(uid);

    rfid.PICC_HaltA();
    rfid.PCD_StopCrypto1();

    delay(1000); 
  } else {
    Serial.println("WiFi not connected, status: ");
    Serial.println(WiFi.status());  
  }
}

void sendDataToServer(String uid) {
  if (WiFi.status() == WL_CONNECTED) {
    HTTPClient http;

    Serial.println("Connecting to server...");

    http.begin(client, serverUrl);  
    http.addHeader("Content-Type", "application/json");

    String payload = "{\"rfid\":\"" + uid + "\"}";

    http.setTimeout(15000);  

    int httpResponseCode = http.POST(payload);

    if (httpResponseCode > 0) {
      Serial.print("HTTP Response Code: ");
      Serial.println(httpResponseCode);
      String response = http.getString();


    
      int startIndex = response.indexOf("\"message\":\"") + 11;  
      int endIndex = response.indexOf("\"", startIndex);  

      String messageStr = response.substring(startIndex, endIndex);  

 
        lcd.clear(); 
        lcd.setCursor(0, 0);  
        lcd.print(messageStr);  

      Serial.print("Response: ");
      Serial.println(messageStr);


      
      digitalWrite(LED_PIN2, HIGH); 
      makeBuzzerSound(1000, 200, 1000, 200, 1000); 
      delay(1000);
      digitalWrite(LED_PIN2, LOW);  


    } else {
      Serial.print("Error on sending POST request: ");
      Serial.println(httpResponseCode);
      String response = http.getString();
      Serial.print("Response: ");
      Serial.println(response);  

      digitalWrite(LED_PIN2, HIGH);  
      makeBuzzerSound(1000, 200, 1000, 200, 1000); 
      delay(1000);      
            digitalWrite(LED_PIN2, LOW);  
    }

    http.end();
  } else {
    Serial.println("WiFi not connected, status: ");
    Serial.println(WiFi.status());
  }
}

void makeBuzzerSound(int frequency1, int duration1, int frequency2, int duration2, int frequency3) {
  tone(BUZZER_PIN, frequency1);  
  delay(duration1);            
  noTone(BUZZER_PIN);          

  delay(100);                  

  tone(BUZZER_PIN, frequency2);  
  delay(duration2);             
  noTone(BUZZER_PIN);            

  delay(100);                   

  tone(BUZZER_PIN, frequency3);  
  delay(500);                   
  noTone(BUZZER_PIN);          
}
